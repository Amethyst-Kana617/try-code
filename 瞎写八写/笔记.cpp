//程序的基本结构：
//编写各类语言程序之前先装好环境设置，包括编译器、调试器、集成开发环境（IDE）等。
#include <iostream>//inculde（包含）头文件<iostreaem>，头文件中包含了程序所需要的各种函数(function)和变量的声明。
//例如C头文件<ctype.h>中包含function的"isalpha"，可以用来判断一个字符是否为字母。//AI自动编写和补全真是太恐怖了X.X
using namespace std;//using namespace std告诉编译器使用std命名空间中的函数和变量。
int main()//int是盒子，main()是盒子名(主函数名)。表示程序从这里开始执行。
{
    cout<<"hello world";//cout(暂时理解为函数的变量)
    return 0;//return 0表示此段落程序正常结束，返回值0。
}//{}内是程序的主体代码，可以包含多个语句，这是一个语句块。里面的；表示语句结束。所以上面的语句也可以写成：cout<<"hello world";return 0;

//标识符：
//标识符是用来标识变量、函数、类、结构体等的名称。
//标识符的命名规则：
//1. 必须以字母、数字或下划线开头。
//2. 不能以数字开头。
//3. 区分大小写。
//4. 不能使用关键字。
//5. 不能使用保留字。
//6. 尽量简短，易于理解。
//上面都是AI写的，所以Manpower和Manpower是两个完全不同的变量。
//关键字：
//C++语言中有一些保留字，不能用作标识符。
//关键字有完整列表，自己查

//三字符组：
//用上的时候再补课

//CPP会忽略空格和换行符，所以可以不用空格和换行符来分隔语句，只是为了方便阅读。

//c#和c++的区别：
//1. 语法不同，c#是面向对象编程语言，c++是面向过程编程语言。
//2. 运行速度不同，c#更快，c++更慢。
//3. 内存管理不同，c#有垃圾回收机制，c++没有。
//4. 运行效率不同，c#更高效，c++更低效。
//5. 兼容性不同，c#可以与.NET框架兼容，c++只能与windows兼容。
//6. 开发效率不同，c#更高效，c++更低效。 
//AI总结：
//C++是一种面向对象、面向过程的高级编程语言，具有丰富的功能和强大的性能。
//C++是一种静态类型语言，编译器在编译时就能确定变量的类型，而不需要在运行时进行类型检查。
//C++支持多种编程范式，包括面向对象编程、泛型编程、函数式编程、并行编程等。
//C++支持自动内存管理，不需要手动释放内存，提高了程序的运行效率。
//C++支持多种操作系统，包括Windows、Linux、MacOS等。

//CPP中有单行注释"//"和多行注释"/* */"，单行注释后面不能有空格，多行注释可以嵌套。
/*你看
我看
他看
啊啊啊啊啊
多行注释
多行注释
111*/

//CPP中有以下七种基本数据类型：
//布尔型：bool
//字符型：char
//整型：int
//浮点型：float
//双浮点型：double
//无类型：void
//宽字符型：wchar_t
/*部分基本类型可以使用一个或多个类型修饰符进行修饰：signed、unsigned、short、long*/
//各种变量类型再内存中储存值时需要占用内存，既变量所储存的最大值和最小值。详细占用量查表






//5. 指针型：指针变量保存的是内存地址，可以用来间接访问内存中的数据。
//6. 数组型：数组变量保存的是一组相同类型的数据，可以用来存储一系列数据。
//7. 字符串型：字符串变量保存的是一串字符，可以用来存储文本信息。
//8. 结构体型：结构体变量保存的是一组相关的数据，可以用来存储复杂的数据结构。
//9. 枚举型：枚举变量保存的是一组相关的常量，可以用来表示一组相关的值。
//10. 类型：类变量保存的是一组相关的函数和数据，可以用来表示一个对象。
//11. 函数型：函数变量保存的是一个函数的地址，可以用来调用函数。
//12. 引用型：引用变量保存的是另一个变量的地址，可以用来间接访问变量。
//13. 运算符：运算符用来执行各种操作，包括算术运算、逻辑运算、赋值运算、条件运算、位运算、指针运算等。
//14. 控制语句：控制语句用来控制程序的执行流程，包括条件语句、循环语句、跳转语句等。
//15. 异常处理：异常处理用来处理程序运行过程中出现的错误，包括语法错误、逻辑错误、运行时错误等。
//16. 模板：模板可以用来定义通用数据类型，可以减少代码重复，提高代码的可重用性。
//17. 命名空间：命名空间可以用来组织代码，可以避免命名冲突，提高代码的可维护性。
//18. 预处理器：预处理器用来处理程序中的文本，可以用来定义常量、宏、条件编译等。
//19. 头文件：头文件用来包含程序所需要的各种函数、变量的声明，可以提高代码的可读性。
//20. 库：库用来提供各种功能，可以提高代码的可移植性。
//21. 标准库：标准库提供了各种常用功能，可以提高代码的可移植性。
//22. 第三方库：第三方库提供了各种功能，可以提高代码的可扩展性。